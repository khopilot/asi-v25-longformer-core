Metadata-Version: 2.2
Name: asi-v25-longformer
Version: 2.5.0
Summary: Ultra-Professional Linear Attention with 2.44x speedup
Home-page: https://github.com/asi-research/asi-v25-longformer-core
Author: ASI Research Team
Author-email: contact@asi-research.com
Project-URL: Bug Tracker, https://github.com/asi-research/asi-v25-longformer-core/issues
Project-URL: Documentation, https://huggingface.co/asi-research/asi-v25-longformer-core
Project-URL: Source Code, https://github.com/asi-research/asi-v25-longformer-core
Project-URL: Demo Space, https://huggingface.co/spaces/asi-research/asi-v25-live-demo
Project-URL: Enterprise, https://asi-research.com/enterprise
Keywords: attention-mechanism,linear-attention,longformer,performance-optimization,transformer,pytorch,natural-language-processing,deep-learning
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=1.12.0
Requires-Dist: transformers>=4.21.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: datasets>=2.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Provides-Extra: demo
Requires-Dist: gradio>=3.0; extra == "demo"
Requires-Dist: matplotlib>=3.5.0; extra == "demo"
Requires-Dist: plotly>=5.0; extra == "demo"
Provides-Extra: enterprise
Requires-Dist: flash-attn>=2.0; extra == "enterprise"
Requires-Dist: triton>=2.0; extra == "enterprise"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: project-url
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# ASI V2.5: Ultra-Professional Linear Attention

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![HuggingFace](https://img.shields.io/badge/🤗-HuggingFace-yellow)](https://huggingface.co)
[![Validated](https://img.shields.io/badge/Validated-Longformer--4096-green)](https://huggingface.co/allenai/longformer-base-4096)

**ASI V2.5** is an ultra-professional linear attention mechanism achieving **2.44x speedup** on Longformer-4096 with **91.7% layer coverage** and perfect stability.

## 🏆 Demonstrated Performance

| Metric | Result | Status |
|--------|--------|---------|
| **Best Speedup** | **2.44x** | 🚀 **Proven** |
| **Average Speedup** | **2.38x** | ✅ **Consistent** |
| **Layer Coverage** | **91.7%** | 🔥 **Record** |
| **Throughput** | **~18K tok/s** | 📈 **Linear scaling** |
| **Architecture** | **Longformer-4096** | 📚 **Modern** |

## 🚀 Quick Start

### Installation

```bash
pip install asi-v25-longformer
```

### Basic Usage

```python
from asi_v25 import UltraProfessionalASIAttention, ExtremeConfig

# EXTREME configuration (our best results)
config = ExtremeConfig(
    asi_threshold=8,        # Ultra-aggressive LINEAR mode
    feature_dim=4,          # Minimal overhead
    layers_to_replace=22    # Maximum coverage
)

# Initialize ASI attention with EXTREME settings
attention = UltraProfessionalASIAttention(
    dim=768,                           # Longformer hidden size
    num_heads=12,                      # Longformer attention heads
    exact_threshold=config.asi_threshold,  # 8 tokens (EXTREME)
    feature_dim=config.feature_dim,        # 4 features (EXTREME)
    mixed_precision=False,             # MPS stable
    use_einsum=True                    # Performance optimized
)

# Use in your model
import torch
batch_size, seq_len, hidden_size = 2, 2048, 768
hidden_states = torch.randn(batch_size, seq_len, hidden_size)

# Forward pass
outputs, weights = attention(
    query=hidden_states,
    need_weights=True
)
print(f"Output shape: {outputs.shape}")  # [2, 2048, 768]
```

### Longformer Integration

```python
from transformers import LongformerModel, LongformerTokenizer
from asi_v25 import integrate_asi_extreme

# Load Longformer
model = LongformerModel.from_pretrained("allenai/longformer-base-4096")
tokenizer = LongformerTokenizer.from_pretrained("allenai/longformer-base-4096")

# Apply EXTREME ASI integration (91.7% coverage)
integrate_asi_extreme(model, config)

# Ready for 2.44x speedup!
```

## 🔬 Technical Innovation

### Adaptive Attention Mechanism

ASI V2.5 employs an **ultra-aggressive adaptive mechanism** that switches between exact and linear attention:

- **Ultra-short sequences (≤8)**: Exact attention for precision
- **All other sequences (>8)**: Linear attention for speed

### EXTREME Configuration

```python
def extreme_attention(q, k, v, threshold=8):
    seq_len = q.shape[-2]
    
    if seq_len <= threshold:  # EXTREME threshold
        # Exact attention: O(L²) - rare!
        return exact_attention(q, k, v)
    else:
        # Linear attention: O(L) - almost always!
        return linear_attention_4d(q, k, v)  # 4D feature space
```

### Ultra-Minimal Feature Mapping

Uses only **4 feature dimensions** (vs 64+ standard) for maximum speed:

```python
q_feat = feature_map_4d(q)    # Minimal 4D transformation
k_feat = feature_map_4d(k)
kv = k_feat.transpose(-2, -1) @ v
output = q_feat @ kv          # O(L*4*D) complexity
```

## 📊 Validation Results

### Longformer-base-4096 Benchmark (MPS)

Comprehensive evaluation on Apple Silicon with extreme parameters:

| Sequence Length | Baseline Time | ASI Time | Speedup | Throughput | Mode | Status |
|----------------|---------------|----------|---------|------------|------|--------|
| **512** | 69.3ms | 30.9ms | **2.25x** | 16,578 tok/s | LINEAR | ⚡ BON |
| **1024** | 137.4ms | 57.4ms | **2.39x** | 17,830 tok/s | LINEAR | ⚡ BON |
| **2048** | 275.4ms | 113.2ms | **2.43x** | 18,096 tok/s | LINEAR | ⚡ BON |
| **4096** | 551.7ms | 226.3ms | **2.44x** | 18,097 tok/s | LINEAR | ⚡ BON |

### Success Criteria

✅ **Speedup > 2x**: 2.44x (ACHIEVED)  
✅ **High coverage**: 91.7% (RECORD)  
✅ **Stability**: Zero crashes (PERFECT)  
✅ **Linear scaling**: ~18K tok/s constant (CONFIRMED)

## 🛠️ Configuration

### EXTREME Configuration (Recommended)

```python
from asi_v25 import ExtremeConfig

config = ExtremeConfig(
    asi_threshold=8,                     # ULTRA-aggressive (vs 256 standard)
    feature_dim=4,                       # Minimal overhead (vs 64 standard)
    layers_to_replace=22,                # Maximum coverage (vs 6 standard)
    test_lengths=[512, 1024, 2048, 4096], # Long sequences
    target_speedup=11.48,                # Aspirational target
    eval_samples=12,                     # High precision
    precision_runs=10                    # Statistical rigor
)
```

### Conservative Configuration

```python
# For stability-first applications
config = ExtremeConfig(
    asi_threshold=32,      # Less aggressive
    feature_dim=16,        # More features
    layers_to_replace=12   # Moderate coverage
)
```

## 🔧 Advanced Usage

### Complete Integration Script

```python
from asi_v25 import UltraSpeedupASI, ExtremeConfig

# EXTREME configuration
config = ExtremeConfig()

# Initialize system
reproducer = UltraSpeedupASI(config)

# Run complete benchmark
results = reproducer.run_extreme_test()

# Expected output:
# 🏆 EXTREME FINAL: 2.38x avg, 2.44x max
# ⚡ PROGRESS! Keep optimizing!
```

### Production Deployment

```python
# Enable optimizations for production
config = ExtremeConfig(
    asi_threshold=8,           # Maximum speed
    feature_dim=4,             # Minimal memory
    layers_to_replace=20,      # High coverage
    use_mixed_precision=False, # MPS stability
    force_fp32=True           # Reliability
)
```

## 📈 Performance Analysis

### Scaling Comparison

| Sequence Length | Standard Attention | ASI V2.5 EXTREME | Improvement |
|-----------------|-------------------|------------------|-------------|
| 512 | O(512²) = 262K | O(512*4) = 2K | **131x** operations |
| 1K | O(1K²) = 1M | O(1K*4) = 4K | **250x** operations |
| 2K | O(4K²) = 4M | O(2K*4) = 8K | **500x** operations |
| 4K | O(16K²) = 16M | O(4K*4) = 16K | **1000x** operations |

### Real-World Throughput

ASI V2.5 maintains **constant ~18K tok/s** regardless of sequence length (LINEAR scaling confirmed).

## 🎯 Reproduction Instructions

### Install and Test

```bash
# Clone and install
git clone https://huggingface.co/asi-research/asi-v25-longformer-core
cd asi-v25-longformer-core
pip install -e .

# Run EXTREME reproduction
python examples/reproduce_extreme_results.py

# Expected output:
# 🏆 EXTREME FINAL: 2.38x avg, 2.44x max
```

### Hardware Requirements

- **Apple Silicon**: Native MPS support (recommended)
- **CUDA GPUs**: RTX 30xx/40xx, A100, H100
- **Memory**: 8GB+ for Longformer-4096
- **Python**: 3.8+ with PyTorch 1.12+

## 🤝 Contributing

Areas for improvement:

- **GPU optimization**: CUDA kernel optimization for >5x speedups
- **Architecture support**: BERT, RoBERTa, GPT variants
- **Longer sequences**: 8K, 16K token validation
- **Quality metrics**: Perplexity preservation studies

## 📝 Citation

```bibtex
@software{asi_v25_extreme_2025,
  title={ASI V2.5: Ultra-Professional Linear Attention with 2.44x Speedup},
  author={ASI Research Team},
  year={2025},
  url={https://huggingface.co/asi-research/asi-v25-longformer-core},
  note={91.7% coverage, Longformer-4096 validated, MPS optimized}
}
```

## 📄 License

MIT License - see [LICENSE](LICENSE) for details.

## 🔗 Links

- **Demo Space**: [ASI V2.5 Live Demo](https://huggingface.co/spaces/asi-research/asi-v25-live-demo)
- **Documentation**: [HuggingFace Hub](https://huggingface.co/asi-research/asi-v25-longformer-core)
- **Source Code**: [GitHub Repository](https://github.com/asi-research/asi-v25-longformer-core)
- **Enterprise**: [ASI Research](https://asi-research.com/enterprise)

---

**Built with ❤️ by the ASI V2.5 Research Team**

*Transforming attention mechanisms with proven performance* 🚀
